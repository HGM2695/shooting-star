<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright floweryclover 2024, All rights reserved. -->
<root xmlns:android="http://schemas.android.com/apk/res/android">
    <init>
        <log text="AndroidUPL Init"></log>
        <trace enable="true"/>
    </init>

    <prebuildCopies>
        <copyDir src="$S(PluginDir)/Private/Android" dst="$S(BuildDir)/src/com/shootingstar/wifidirect" />
    </prebuildCopies>

    <gameActivityImportAdditions>
        <insert>
            import java.util.List;
            import java.util.Map;
            import java.util.Collection;
            import java.util.stream.Collectors;
            import android.util.Log;
            import android.content.IntentFilter;
            import android.net.wifi.p2p.WifiP2pManager;
            import android.net.wifi.p2p.WifiP2pManager.ActionListener;
            import android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener;
            import android.net.wifi.p2p.WifiP2pManager.GroupInfoListener;
            import android.net.wifi.p2p.WifiP2pManager.P2pStateListener;
            import android.net.wifi.p2p.WifiP2pManager.Channel;
            import android.net.wifi.p2p.WifiP2pManager.Channel;
            import android.net.wifi.p2p.WifiP2pDevice;
            import android.net.wifi.p2p.WifiP2pConfig;
            import android.net.wifi.p2p.WifiP2pInfo;
            import android.net.wifi.p2p.WifiP2pGroup;
            import android.net.wifi.p2p.WifiP2pDeviceList;
            import android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo;
            import android.net.wifi.WpsInfo;
            import android.net.MacAddress;

            import com.shootingstar.wifidirect.WifiDirectCallbacks;
        </insert>
    </gameActivityImportAdditions>

    <gameActivityClassAdditions>
        <insert>
            private final IntentFilter intentFilter = new IntentFilter();
            private Channel channel;
            private WifiP2pManager manager;
            private WifiP2pDnsSdServiceInfo serviceInfo;
            
            public void discoverPeers() {
                manager.discoverPeers(channel, new ActionListener() {
                    @Override
                    public void onSuccess() {}

                    @Override
                    public void onFailure(int reasonCode) {
                        WifiDirectCallbacks.onWifiDirectDiscoverPeersError(reasonCode);
                    }
                });
            }
            
            public void requestPeers() {
                manager.requestPeers(channel, new WifiP2pManager.PeerListListener() {
                    @Override
                    public void onPeersAvailable(WifiP2pDeviceList peers) {
                        if (peers == null) {
                            return;
                        }
            
                        Collection&lt;WifiP2pDevice&gt; devices = peers.getDeviceList();
                        if (devices == null || devices.isEmpty()) {
                            return;
                        }
            
                        List&lt;String&gt; availableDeviceNames = new ArrayList&lt;&gt;();
                        List&lt;String&gt; availableDeviceAddresses = new ArrayList&lt;&gt;();
            
                        for (WifiP2pDevice device : devices) {
                            if (device.status == WifiP2pDevice.AVAILABLE || device.status == WifiP2pDevice.CONNECTED) {
                                availableDeviceNames.add(device.deviceName);
                                availableDeviceAddresses.add(device.deviceAddress);
                            }
                        }

                        for (WifiP2pDevice device : devices) {
                            if (device.status == WifiP2pDevice.AVAILABLE) {
                                availableDeviceNames.add(device.deviceName);
                                availableDeviceAddresses.add(device.deviceAddress);
                            }
                        }
            
                        String[] deviceNames = availableDeviceNames.toArray(new String[0]);
                        String[] deviceAddresses = availableDeviceAddresses.toArray(new String[0]);
            
                        WifiDirectCallbacks.onWifiDirectRefreshPeerList(deviceNames, deviceAddresses);
                    }
                });
            }

            public void stopPeerDiscovery() {
                manager.stopPeerDiscovery(channel, new ActionListener() {
                    @Override
                    public void onSuccess() {}
        
                    @Override
                    public void onFailure(int reasonCode) {}
                });
            }

            public void addLocalService() {
                manager.addLocalService(channel, serviceInfo, new ActionListener() {
                    @Override
                    public void onSuccess() {}
        
                    @Override
                    public void onFailure(int reasonCode) {
                        WifiDirectCallbacks.onWifiDirectAddLocalServiceError(reasonCode);
                    }
                });
            }

            public void removeLocalService() {
                manager.removeLocalService(channel, serviceInfo, new ActionListener() {
                    @Override
                    public void onSuccess() {}
        
                    @Override
                    public void onFailure(int reasonCode) {}
                });
            }

            public void removeGroup() {
                manager.removeGroup(channel, new ActionListener() {
                    @Override
                    public void onSuccess() {}
        
                    @Override
                    public void onFailure(int reasonCode) { }
                });
            }
            
            public void requestP2pState() {
                manager.requestP2pState(channel, new P2pStateListener() {
                    @Override
                    public void onP2pStateAvailable(int state) {
                        WifiDirectCallbacks.onWifiDirectRefreshP2pState(state == WifiP2pManager.WIFI_P2P_STATE_ENABLED);
                    }
                });
            }

            public void requestDiscoveryState() {
                manager.requestDiscoveryState(channel, new WifiP2pManager.DiscoveryStateListener() {
                    @Override
                    public void onDiscoveryStateAvailable(int state) {
                        WifiDirectCallbacks.onWifiDirectRefreshDiscoveryState(state == WifiP2pManager.WIFI_P2P_DISCOVERY_STARTED);
                    }
                });
            }

            public void requestConnectionInfo() {
                manager.requestConnectionInfo(channel, new WifiP2pManager.ConnectionInfoListener() {
                    @Override
                    public void onConnectionInfoAvailable(WifiP2pInfo info) {
                        if (info != null) {
                            String groupOwnerAddress;
                            if (info.groupOwnerAddress != null) {
                                groupOwnerAddress = info.groupOwnerAddress.getHostAddress();
                            } else {
                                groupOwnerAddress = "";
                            }
            
                            WifiDirectCallbacks.onWifiDirectRefreshGroup(info.groupFormed, info.isGroupOwner, groupOwnerAddress);
                        }
                    }
                });
            }

            public void connectToDevice(String deviceAddress) {
                WifiP2pConfig config = new WifiP2pConfig();
                config.deviceAddress = deviceAddress;
                manager.connect(channel, config, new ActionListener() {
                    @Override
                    public void onSuccess() { }

                    @Override
                    public void onFailure(int reason) {
                        WifiDirectCallbacks.onWifiDirectConnectError(reason);
                    }
                });
            }
        </insert>
    </gameActivityClassAdditions>

    <gameActivityOnCreateAdditions>
        <insert>
            intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);
            intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);
            intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);
            intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);
            
            Map&lt;String, String&gt; record = new HashMap&lt;&gt;();
            record.put("available", "visible");
            serviceInfo = WifiP2pDnsSdServiceInfo.newInstance("ShootingStarInstance", "_shootingstar._tcp", record);
            
            manager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE);
            channel = manager.initialize(this, getMainLooper(), null); // REQUIRES android.permission.CHANGE_WIFI_STATE

            manager.setDnsSdResponseListeners(channel,
                new WifiP2pManager.DnsSdServiceResponseListener() {
                    @Override
                    public void onDnsSdServiceAvailable(String instanceName, String registrationType, WifiP2pDevice srcDevice) {
                        if (instanceName.equals("ShootingStarInstance") &amp;&amp; (srcDevice.status == WifiP2pDevice.CONNECTED || srcDevice.status == WifiP2pDevice.AVAILABLE)) {
                            WifiDirectCallbacks.onWifiDirectDnsSdServiceAvailable(srcDevice.deviceName, srcDevice.deviceAddress);
                        }
                    }
                },
                new WifiP2pManager.DnsSdTxtRecordListener() {
                    @Override
                    public void onDnsSdTxtRecordAvailable(String fullDomainName, Map&lt;String, String&gt; record, WifiP2pDevice srcDevice) {
                    }
                }
            );
        </insert>
    </gameActivityOnCreateAdditions>

    <gameActivityOnPauseAdditions>
        <insert>
            stopPeerDiscovery();
            removeLocalService();
        </insert>
    </gameActivityOnPauseAdditions>
    
    <gameActivityOnStopAdditions>
        <insert>
            stopPeerDiscovery();
            removeLocalService();
            removeGroup();
        </insert>
    </gameActivityOnStopAdditions>
</root>