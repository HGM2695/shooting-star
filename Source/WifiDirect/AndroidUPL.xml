<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright floweryclover 2024, All rights reserved. -->
<root xmlns:android="http://schemas.android.com/apk/res/android">
    <init>
        <log text="AndroidUPL Init"></log>
        <trace enable="true"/>
    </init>

    <prebuildCopies>
        <copyDir src="$S(PluginDir)/Private/Android" dst="$S(BuildDir)/src/com/shootingstar/wifidirect" />
    </prebuildCopies>

    <gameActivityImportAdditions>
        <insert>
            import java.util.List;
            import java.util.Map;
            import java.util.Collection;
            import java.util.stream.Collectors;
            import android.util.Log;
            import android.net.wifi.p2p.WifiP2pManager;
            import android.net.wifi.p2p.WifiP2pManager.ActionListener;
            import android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener;
            import android.net.wifi.p2p.WifiP2pManager.GroupInfoListener;
            import android.net.wifi.p2p.WifiP2pManager.P2pStateListener;
            import android.net.wifi.p2p.WifiP2pManager.Channel;
            import android.net.wifi.p2p.WifiP2pManager.Channel;
            import android.net.wifi.p2p.WifiP2pDevice;
            import android.net.wifi.p2p.WifiP2pConfig;
            import android.net.wifi.p2p.WifiP2pInfo;
            import android.net.wifi.p2p.WifiP2pGroup;
            import android.net.wifi.p2p.WifiP2pDeviceList;
            import android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo;
            import android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest;
            import android.net.wifi.WpsInfo;
            import android.net.MacAddress;

            import com.shootingstar.wifidirect.WifiDirectCallbacks;
        </insert>
    </gameActivityImportAdditions>

    <gameActivityClassAdditions>
        <insert>
            private static final int REQUEST_WIFI_DIRECT_PERMISSION = 100;
            private static final String shootingStarServiceName = "_shootingstar._tcp";
            private Channel channel;
            private WifiP2pManager manager;
            private WifiP2pDnsSdServiceInfo serviceInfo;
            private WifiP2pDnsSdServiceRequest serviceRequest;
            private String uniqueInstanceName;

            private void stopPeerDiscovery() {
                manager.stopPeerDiscovery(channel, new ActionListener() {
                    @Override
                    public void onSuccess() {}
        
                    @Override
                    public void onFailure(int reasonCode) {}
                });
            }

            public void disconnect() {
                manager.removeGroup(channel, new ActionListener() {
                    @Override
                    public void onSuccess() {}
        
                    @Override
                    public void onFailure(int reasonCode) { }
                });
            }

            public void refreshGroupInfo() {
                manager.requestConnectionInfo(channel, new WifiP2pManager.ConnectionInfoListener() {
                    @Override
                    public void onConnectionInfoAvailable(WifiP2pInfo info) {
                        if (info != null) {
                            String groupOwnerAddress;
                            if (info.groupOwnerAddress != null) {
                                groupOwnerAddress = info.groupOwnerAddress.getHostAddress();
                            } else {
                                groupOwnerAddress = "";
                            }
                            WifiDirectCallbacks.onRefreshGroup(info.groupFormed, info.isGroupOwner, groupOwnerAddress);
                        }
                    }
                });
            }

            public void connect(String deviceMacAddress) {
                WifiP2pConfig config = new WifiP2pConfig();
                config.deviceAddress = deviceMacAddress;
                manager.connect(channel, config, new ActionListener() {
                    @Override
                    public void onSuccess() { }

                    @Override
                    public void onFailure(int reason) {
                        android.util.Log.e("ShootingStarWifiDirect", "connect() Failed: " + reason);
                        WifiDirectCallbacks.onConnectionFailed("", deviceMacAddress);
                    }
                });
            }
            
            public void cancelConnect() {
                manager.cancelConnect(channel, new ActionListener() {
                    @Override
                    public void onSuccess() {}
        
                    @Override
                    public void onFailure(int reason) {}
                });
            }
            
            public void refreshServiceDiscovery() {
                manager.clearServiceRequests(channel, new ActionListener() {
                    @Override
                    public void onSuccess() {
                        manager.addServiceRequest(channel, serviceRequest, new ActionListener() {
                            public void onSuccess() {
                                manager.discoverServices(channel, new ActionListener() {
                                    @Override
                                    public void onSuccess() {
                                        android.util.Log.d("ShootingStarWifiDirect", "RefreshServiceDiscovery() Success");

                                    }
                                    
                                    @Override
                                    public void onFailure(int reason) {
                                        if (reason == 2) {
                                            return;
                                        }
                                        WifiDirectCallbacks.onError("서비스 검색 실패, 서비스 검색 실행에 실패하였습니다. 에러 코드: " + reason + ".");
                                    }
                                });
                            }
                
                            @Override
                            public void onFailure(int reason) {
                                if (reason == 2) {
                                    return;
                                }
                                WifiDirectCallbacks.onError("서비스 검색 실패, 서비스 요청 정보 등록에 실패하였습니다. 에러 코드: " + reason + ".");
                                clear();
                            }
                        });
                    }

                    @Override
                    public void onFailure(int reason) {
                        if (reason == 2) {
                            return;
                        }
                        WifiDirectCallbacks.onError("서비스 검색 실패, 서비스 요청 정보 초기화에 실패하였습니다. 에러 코드: " + reason + ".");
                        clear();
                    }
                });
            }
            
            private void clearServiceDiscovery() {
                manager.clearServiceRequests(channel, null);
            }
            
            public void registerService() {
                manager.clearLocalServices(channel, new ActionListener() {
                    @Override
                    public void onSuccess() {
                        manager.addLocalService(channel, serviceInfo, new ActionListener() {
                            @Override
                            public void onSuccess() {
                                android.util.Log.d("ShootingStarWifiDirect", "registerService() Success");
                            }
                
                            @Override
                            public void onFailure(int reason) {
                                if (reason == 2) { // BUSY
                                    new android.os.Handler(android.os.Looper.getMainLooper()).postDelayed(new Runnable() {
                                        @Override
                                        public void run() {
                                            android.util.Log.w("ShootingStarWifiDirect", "registerService() was busy, retrying");
                                            registerService();
                                        }
                                    }, 100);
                                } else {
                                    WifiDirectCallbacks.onError("서비스 등록 실패, 서비스 등록에 실패하였습니다. 에러 코드: " + reason + ".");
                                    clear();
                                }
                            }
                        });
                    }
        
                    @Override
                    public void onFailure(int reason) {
                        if (reason == 2) { // BUSY
                            new android.os.Handler(android.os.Looper.getMainLooper()).postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    registerService();
                                }
                            }, 500);
                        } else {
                            WifiDirectCallbacks.onError("서비스 등록 실패, 서비스 등록에 실패하였습니다. 에러 코드: " + reason + ".");
                            clear();
                        }
                    }
                });
            }
            
            private void unregisterService() {
                manager.clearLocalServices(channel, null);
            }
            
            public void refreshServiceBroadcast() {
                manager.discoverPeers(channel, new ActionListener() {
                    @Override
                    public void onSuccess() {
                        android.util.Log.d("ShootingStarWifiDirect", "RefreshServiceBroadcast() Success");
                    }
        
                    @Override
                    public void onFailure(int reason) {
                        if (reason == 2) {
                            return;
                        }
                        WifiDirectCallbacks.onError("서비스 브로드캐스트 갱신에 실패하였습니다. 에러 코드: " + reason + ".");
                        clear();
                    }
                });
            }

            public void checkAndRequestPermissions() {
                if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {
                    if (checkSelfPermission(android.Manifest.permission.NEARBY_WIFI_DEVICES)
                            != PackageManager.PERMISSION_GRANTED) {
                        requestPermissions(new String[]{ android.Manifest.permission.NEARBY_WIFI_DEVICES },
                            REQUEST_WIFI_DIRECT_PERMISSION);
                    }
                } else {
                    if (checkSelfPermission(android.Manifest.permission.ACCESS_FINE_LOCATION)
                        != PackageManager.PERMISSION_GRANTED) {
                        requestPermissions(new String[]{ android.Manifest.permission.ACCESS_FINE_LOCATION },
                            REQUEST_WIFI_DIRECT_PERMISSION);
                    }
                }
            }
            
            public void clear() {
                disconnect();
                stopBroadcastAndDiscovery();
            }
            
            public void stopBroadcastAndDiscovery() {
                cancelConnect();
                clearServiceDiscovery();
                stopPeerDiscovery();
                unregisterService();
            }
            
        </insert>
    </gameActivityClassAdditions>

    <gameActivityOnCreateAdditions>
        <insert>
            uniqueInstanceName = Build.MODEL + "_" + Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);
            serviceInfo = WifiP2pDnsSdServiceInfo.newInstance(uniqueInstanceName, shootingStarServiceName, null);
            serviceRequest = WifiP2pDnsSdServiceRequest.newInstance(shootingStarServiceName);
            
            manager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE);
            channel = manager.initialize(this, getMainLooper(), null); // REQUIRES android.permission.CHANGE_WIFI_STATE

            manager.setDnsSdResponseListeners(channel,
                new WifiP2pManager.DnsSdServiceResponseListener() {
                    @Override
                    public void onDnsSdServiceAvailable(String instanceName, String registrationType, WifiP2pDevice srcDevice) {
                        if (instanceName.equals("") || instanceName.equals(uniqueInstanceName) || srcDevice.deviceName.equals("") || srcDevice.deviceAddress.equals("")) {
                            return;
                        }
                        android.util.Log.d("ShootingStarWifiDirect", "Service found: " + srcDevice.deviceName + " " + instanceName);
                        WifiDirectCallbacks.onServiceFound(srcDevice.deviceName, srcDevice.deviceAddress);
                    }
                },
                new WifiP2pManager.DnsSdTxtRecordListener() {
                    @Override
                    public void onDnsSdTxtRecordAvailable(String fullDomainName, Map&lt;String, String&gt; record, WifiP2pDevice srcDevice) {
                    }
                }
            );
        </insert>
    </gameActivityOnCreateAdditions>
    
    <gameActivityOnDestroyAdditions>
        <insert>
            clear();
        </insert>
    </gameActivityOnDestroyAdditions>
</root>